"""
PE005
2520 is the smallest number that can be divided by each of the numbers
from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible
by all of the numbers from 1 to 20?
"""
#正の整数のうち、1から20までの全ての数で割り切れる最小の数はいくつか。
#1から10の場合の最小数は2520である。

#コードを書くまえにとりあえず全体の処理の流れを日本語で書いておくと
#訳がわからなくなるリスクを小さくできる。

#一番頭の悪そうなアプローチは、1から求める数まで総当たりで1から20
#で割り切れそうか試してみることだろう。
#実際にそんなコードを書いてみよう。
#結果過負荷により計算が止まる。

#1から20までの整数を表現するのに最低限必要な約数の総積を求める。
#たぶん、それがそのままこの問いの答えである。

#まず1から20をみんなリストに入れてみる。

#泥沼に入ったので仕切り直し。

#まず1から20までの全ての整数で割り切れる最小の数というのは
#最小公倍数なので、「一つも余計な約数が入っていない」かつ「含まれる約数で1から20までの整数を全て表現できる」ということである。
#例えば2が二つ、5が一つあれば、2,4,5,10,20を表現できる。つまりそれらで割り切ることができる。
#11や13や17のような素数は必ず一回は入る。
#しかし、単に素数の総積を取ればいい訳じゃないらしい。例えば、2が一個しかないと、6は表現できても4,8,ができない。
#2は例えば、2,4,8,16,を表現するのに4つは必要である。
#同様に3は、3,9を表現するのに必要である。
#20までを考えればいい場合、あとは素数だけを加えていけばいい。
#つまり、7,11,13,17,19である。
#手計算で答えが出てしまった。つまり、

x = 16 * 9 * 5 * 7 * 11 * 13 * 17 * 19

#である。

print(x)

#違うらしい。
#5が素数として抜けていた。付け足したら正解。
#これは反則である。プログラミングの腕は上がっていないが、数学の経験はちょっとだけ深まった。
#しかし、この答えから逆算するとして、どうすればこの過程をpythonで表現できるだろうか。

#一言でいえば「必要な約数を必要なだけ確保する」のである。
#ここで1から20のうちいらない数は1,2,3,4,6,8,10,12,14,15,16,18,20である。
#どうやってこのいらない約数を抽出するか考えるのである。
#下手な考え休むに似たりな気がしてきたので、PDFを見てしまう。

#logの概念が出てきたので、一旦理解するのを諦めた。
#別個に対数のことを勉強しておこう。
""""
五問目、昔PEをやってた時は、この辺から先に進めなくなった.
問題解決の補助になるような数学的な知識は全くもっていない。
おそらく、PEを進めながら、プログラミング言語の知識と数学の知識を並行して身につける必要がある。
どうも小手先のコーディングはできるようになってきたが、全体のデータの流れを設計する力が弱い。
手だけ動かしても余計迷うだけのことが多い。
今回これは数時間問題と睨めっこした癖に、ほとんど何も学んでない。費用対効果の非常に低い学習である。
ただ対数を利用しないと解けないということがわかった。
対数を勉強しよう。
"""
