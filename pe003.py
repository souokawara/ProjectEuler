"""
PE003
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
"""
#巨大な数の素因数分解。いかにもコンピューターの仕事。
#2,3,5,7...と小さい素数から総当たり的に試行していけば、「いつかは」終わりそうである。
#しかし、この問題は総当たり方式以外の計算法を要求している気がする。

#試しに総当たり式を書いてみる。

#600851475143までの素数をすべてリストに格納してみる。

#その前に600851475143個の要素を持つlistを作れるか試してみる。多分無理だろう。
#これはおそらく計算資源の限界を教えるための出題だろう。

maximum = 600851475143
prime = 2
#numbers_to_maximum = list(range(first_prime,maximum))

#試しに入ったかどうかlen()を打ってみる。

#print(len(numbers_to_maximum))
#入らなかったらしい。リスト機能の限界かもしれない。

#どうやらこのやり方は永遠に終わらないようである。
#となると、総当たり式ではない別のアプローチが必要である。

#別のアプローチとして、2,3,4,5,6,7....と自然数Nの数列を
#どんどん600851475143に対して割っていく
#もし結果が整数にならなければ、その計算はキャンセルし、
#次の自然数に行く。しかし、それをどこまでやればいいのか。
#確かエラトステネスの篩によれば、600851475143の平方根まで計算すれば十分だった気がする。
#mathモジュールを呼び出す。

import math

#600851475143の平方根を小数点以下切り捨てで求める。

limit = int(math.sqrt(maximum))
#775146

#まず素数をどうやって小さい方から生成していくか。
#素数を生成する必要はなかった。割れる因数からどんどん割り、元の数を圧縮していけばいい。
#圧縮ができれば総当たり式が有効になる。
#そして、最後に残るのが最大の素因数である。
for prime in range(prime,limit):
    #複数回割れる因数は可能な限り割る。それによって計算量が早期に圧縮できる。
    while (maximum % prime == 0):
        maximum = maximum / prime
    prime += 1
    #もしもmaximumがprimeより小さくなったら、それが最大の素因数である。
    #この点はなんだかぼんやりしているが、結果的には正解だった。
    if (maximum <= prime):
        break

print(maximum)
#泥臭く試行錯誤していたら解けてしまった。明日ちゃんと原理を把握する。
#しかし、最大のポイントは「エラトステネスの篩」というのを知ってるかどうかだと思う。
#それによって試行回数が6桁減らせて、計算量の爆発を防げる。
