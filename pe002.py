"""
PE002
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence
whose values do not exceed four million, find the sum of the even-valued terms.
"""

"""
#400万未満のフィボナッチ数の偶数項の総和を求める。
#最終的に2を手で足して正答してしまった。邪道だが、時間がないのでこれまでにしておく。

#変数を宣言
previous_fibonacci = 1
current_fibonacci = 2
all_even_fibonacci_sum = 0

#総和を求める予定のフィボナッチ数をリストに格納していく。

all_even_fibonacci = list()

#まず偶奇性を判断する関数を作っておく。

def parity(x):
    if (x % 2 == 0):
        return x
    else:
        return 0 #0という数字ではなくて「なにもない」ということを表現できないか。

#そして、あるフィボナッチ数の次のフィボナッチ数を作る関数を作る。

def fibonacci(n,m): #一つ前のフィボナッチ数と現在のフィボナッチ数を引数にとる。
    l = n + m #次のフィボナッチ数をlに代入。
    return l

#作戦を変えて、最初に400万以下のフィボナッチ数を全部リストに収納してしまうのはどうか。
while (current_fibonacci < 4000000):
#フィボナッチ数の更新、順序が決め手らしい。
    swap = current_fibonacci #swapみたいな変数を使わない方法はないか。
    current_fibonacci = fibonacci(previous_fibonacci,current_fibonacci)
    previous_fibonacci = swap
    all_even_fibonacci.append(parity(fibonacci(previous_fibonacci,current_fibonacci)))

#all_even_fibonacciを全部足す。

#デバッグ用all_even_fibonacciの中身を確認
print(all_even_fibonacci)

all_even_fibonacci_sum = sum(all_even_fibonacci)
print(all_even_fibonacci_sum)

"""
#答えのPDFを見たらもっと短くできた。リストを使わなくても良さそう。

previous_fibonacci = 1
current_fibonacci = 1
all_even_fibonacci_sum = 0
limit = 4000000 #変数化しておくとよい。

while (current_fibonacci < limit):
    if (current_fibonacci % 2 == 0):
        all_even_fibonacci_sum += current_fibonacci

    swap = current_fibonacci + previous_fibonacci #ここで渡しておく
    previous_fibonacci = current_fibonacci #安心して更新できる
    current_fibonacci = swap

print(all_even_fibonacci_sum)
